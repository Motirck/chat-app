
@page
@model ChatApp.Web.Pages.ChatModel
@{
    ViewData["Title"] = "Chat Room";
}

<div class="container-fluid">
    <div class="row">
        <!-- Chat Messages Area -->
        <div class="col-md-8">
            <div class="card h-100">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-comments me-2"></i>Chat Room
                        <small class="ms-2">Welcome, @UserManager.GetUserName(User)!</small>
                    </h5>
                </div>
                <div class="card-body p-0" style="height: 500px;">
                    <!-- Messages Container -->
                    <div id="messagesContainer" class="h-100 overflow-auto p-3">
                        <div id="messagesList">
                            <!-- Messages will be populated here via SignalR -->
                            @foreach (var message in Model.RecentMessages)
                            {
                                <div class="message mb-2">
                                    <div class="d-flex justify-content-between">
                                        <strong class="text-primary">@message.Username</strong>
                                        <small class="text-muted">@message.Timestamp.ToString("HH:mm")</small>
                                    </div>
                                    <div class="message-content">@message.Content</div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <!-- Message Input -->
                    <div class="input-group">
                        <input type="text" id="messageInput" class="form-control" placeholder="Type your message here..." maxlength="1000" />
                        <button class="btn btn-primary" type="button" id="sendButton">
                            <i class="fas fa-paper-plane me-1"></i>Send
                        </button>
                    </div>
                    <small class="text-muted mt-1 d-block">
                        <i class="fas fa-info-circle me-1"></i>
                        Type <code>/stock=symbol</code> to get stock quotes (e.g., /stock=aapl.us)
                    </small>
                </div>
            </div>
        </div>

        <!-- Online Users & Info -->
        <div class="col-md-4">
            <div class="card mb-3">
                <div class="card-header">
                    <h6 class="mb-0">
                        <i class="fas fa-users me-2"></i>Online Users
                        <span id="userCount" class="badge bg-success ms-2">1</span>
                    </h6>
                </div>
                <div class="card-body">
                    <div id="usersList">
                        <!-- Online users will be populated via SignalR -->
                        <div class="d-flex align-items-center mb-2">
                            <span class="online-indicator me-2"></span>
                            <span>@UserManager.GetUserName(User)</span>
                            <small class="text-muted ms-auto">(You)</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Chat Instructions -->
            <div class="card">
                <div class="card-header">
                    <h6 class="mb-0">
                        <i class="fas fa-question-circle me-2"></i>How to Use
                    </h6>
                </div>
                <div class="card-body">
                    <ul class="list-unstyled mb-0">
                        <li class="mb-2">
                            <i class="fas fa-comment text-primary me-2"></i>
                            Type messages and press Enter or click Send
                        </li>
                        <li class="mb-2">
                            <i class="fas fa-chart-line text-success me-2"></i>
                            Use <code>/stock=SYMBOL</code> for stock quotes
                        </li>
                        <li class="mb-2">
                            <i class="fas fa-robot text-info me-2"></i>
                            Bot will respond with current stock prices
                        </li>
                        <li>
                            <i class="fas fa-history text-secondary me-2"></i>
                            Last 50 messages are shown on page load
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Connection Status -->
<div id="connectionStatus" class="position-fixed bottom-0 end-0 m-3">
    <div class="alert alert-info alert-dismissible fade show" role="alert">
        <i class="fas fa-circle-notch fa-spin me-2"></i>
        <span id="statusText">Connecting to chat...</span>
    </div>
</div>

@section Scripts {
    <script>
        // SignalR Chat Implementation
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        const messageInput = document.getElementById("messageInput");
        const sendButton = document.getElementById("sendButton");
        const messagesList = document.getElementById("messagesList");
        const messagesContainer = document.getElementById("messagesContainer");
        const statusElement = document.getElementById("statusText");
        const connectionStatus = document.getElementById("connectionStatus");
        const usersList = document.getElementById("usersList");
        const userCount = document.getElementById("userCount");
        const currentUser = "@UserManager.GetUserName(User)";

        // Start SignalR connection
        connection.start().then(function () {
            statusElement.textContent = "Connected to chat!";
            setTimeout(() => {
                connectionStatus.style.display = 'none';
            }, 3000);

        }).catch(function (err) {
            console.error(err.toString());
            statusElement.textContent = "Connection failed. Please refresh the page.";
            statusElement.parentElement.classList.remove('alert-info');
            statusElement.parentElement.classList.add('alert-danger');
        });

        // Handle incoming messages
        connection.on("ReceiveMessage", function (username, message, timestamp) {
            const messageDiv = document.createElement("div");
            messageDiv.className = "message mb-2";
            
            const time = new Date(timestamp).toLocaleTimeString('en-US', { 
                hour: '2-digit', 
                minute: '2-digit' 
            });

            messageDiv.innerHTML = `
                <div class="d-flex justify-content-between">
                    <strong class="text-primary">${escapeHtml(username)}</strong>
                    <small class="text-muted">${time}</small>
                </div>
                <div class="message-content">${escapeHtml(message)}</div>
            `;

            messagesList.appendChild(messageDiv);
            scrollToBottom();
        });

        // Handle user joined
        connection.on("UserJoined", function (username) {
            addSystemMessage(`${username} joined the chat`);
        });

        // Handle user left
        connection.on("UserLeft", function (username) {
            addSystemMessage(`${username} left the chat`);
        });

        // Handle online users update
        connection.on("UpdateOnlineUsers", function (users) {
            updateOnlineUsersList(users);
        });

        // Handle stock quotes
        connection.on("ReceiveStockQuote", function (quote) {
            const messageDiv = document.createElement("div");
            messageDiv.className = "message mb-2 stock-quote";
            
            const time = new Date().toLocaleTimeString('en-US', { 
                hour: '2-digit', 
                minute: '2-digit' 
            });

            messageDiv.innerHTML = `
                <div class="d-flex justify-content-between">
                    <strong class="text-success">
                        <i class="fas fa-robot me-1"></i>Stock Bot
                    </strong>
                    <small class="text-muted">${time}</small>
                </div>
                <div class="message-content alert alert-success py-1 px-2 mb-0 mt-1">
                    <i class="fas fa-chart-line me-1"></i>${escapeHtml(quote)}
                </div>
            `;

            messagesList.appendChild(messageDiv);
            scrollToBottom();
        });

        // Send message function
        function sendMessage() {
            const message = messageInput.value.trim();
            if (message) {
                connection.invoke("SendMessage", message);
                messageInput.value = "";
            }
        }

        // Update online users list
        function updateOnlineUsersList(users) {
            usersList.innerHTML = '';
            userCount.textContent = users.length;
            
            users.forEach(function(username) {
                const userDiv = document.createElement("div");
                userDiv.className = "d-flex align-items-center mb-2";
                
                const isCurrentUser = username === currentUser;
                const userLabel = isCurrentUser ? ' (You)' : '';
                
                userDiv.innerHTML = `
                    <span class="online-indicator me-2"></span>
                    <span>${escapeHtml(username)}</span>
                    ${isCurrentUser ? '<small class="text-muted ms-auto">(You)</small>' : ''}
                `;
                
                usersList.appendChild(userDiv);
            });
        }

        // Event listeners
        sendButton.addEventListener("click", sendMessage);
        messageInput.addEventListener("keypress", function (e) {
            if (e.key === "Enter") {
                sendMessage();
            }
        });

        // Helper functions
        function addSystemMessage(message) {
            const messageDiv = document.createElement("div");
            messageDiv.className = "message mb-2 system-message";
            messageDiv.innerHTML = `
                <div class="text-center">
                    <small class="text-muted">
                        <i class="fas fa-info-circle me-1"></i>${escapeHtml(message)}
                    </small>
                </div>
            `;
            messagesList.appendChild(messageDiv);
            scrollToBottom();
        }

        function scrollToBottom() {
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        function escapeHtml(text) {
            const div = document.createElement("div");
            div.textContent = text;
            return div.innerHTML;
        }

        // Auto-scroll to bottom on page load
        document.addEventListener("DOMContentLoaded", function() {
            scrollToBottom();
        });
    </script>
}